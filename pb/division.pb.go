// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.4
// source: pb/division.proto

package grabber

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetDivisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDivisionRequest) Reset() {
	*x = GetDivisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_division_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDivisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDivisionRequest) ProtoMessage() {}

func (x *GetDivisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_division_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDivisionRequest.ProtoReflect.Descriptor instead.
func (*GetDivisionRequest) Descriptor() ([]byte, []int) {
	return file_pb_division_proto_rawDescGZIP(), []int{0}
}

func (x *GetDivisionRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Division struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Abbreviation string `protobuf:"bytes,3,opt,name=abbreviation,proto3" json:"abbreviation,omitempty"`
	Head         string `protobuf:"bytes,4,opt,name=head,proto3" json:"head,omitempty"`
	Phone        string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Room         string `protobuf:"bytes,6,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *Division) Reset() {
	*x = Division{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_division_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Division) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Division) ProtoMessage() {}

func (x *Division) ProtoReflect() protoreflect.Message {
	mi := &file_pb_division_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Division.ProtoReflect.Descriptor instead.
func (*Division) Descriptor() ([]byte, []int) {
	return file_pb_division_proto_rawDescGZIP(), []int{1}
}

func (x *Division) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Division) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Division) GetAbbreviation() string {
	if x != nil {
		return x.Abbreviation
	}
	return ""
}

func (x *Division) GetHead() string {
	if x != nil {
		return x.Head
	}
	return ""
}

func (x *Division) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Division) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

type ListDivisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListDivisionsRequest) Reset() {
	*x = ListDivisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_division_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDivisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDivisionsRequest) ProtoMessage() {}

func (x *ListDivisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_division_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDivisionsRequest.ProtoReflect.Descriptor instead.
func (*ListDivisionsRequest) Descriptor() ([]byte, []int) {
	return file_pb_division_proto_rawDescGZIP(), []int{2}
}

type ListDivisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Division `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListDivisionsResponse) Reset() {
	*x = ListDivisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_division_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDivisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDivisionsResponse) ProtoMessage() {}

func (x *ListDivisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_division_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDivisionsResponse.ProtoReflect.Descriptor instead.
func (*ListDivisionsResponse) Descriptor() ([]byte, []int) {
	return file_pb_division_proto_rawDescGZIP(), []int{3}
}

func (x *ListDivisionsResponse) GetData() []*Division {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_pb_division_proto protoreflect.FileDescriptor

var file_pb_division_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x62, 0x2f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x72, 0x61, 0x62, 0x62, 0x65, 0x72, 0x22, 0x24, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x08, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x72, 0x61, 0x62, 0x62, 0x65, 0x72, 0x2e, 0x44,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xa4, 0x01,
	0x0a, 0x0f, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x2e, 0x67, 0x72, 0x61, 0x62, 0x62, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x67, 0x72, 0x61, 0x62, 0x62, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x61, 0x62, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x61, 0x62, 0x62, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_division_proto_rawDescOnce sync.Once
	file_pb_division_proto_rawDescData = file_pb_division_proto_rawDesc
)

func file_pb_division_proto_rawDescGZIP() []byte {
	file_pb_division_proto_rawDescOnce.Do(func() {
		file_pb_division_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_division_proto_rawDescData)
	})
	return file_pb_division_proto_rawDescData
}

var file_pb_division_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pb_division_proto_goTypes = []interface{}{
	(*GetDivisionRequest)(nil),    // 0: grabber.GetDivisionRequest
	(*Division)(nil),              // 1: grabber.Division
	(*ListDivisionsRequest)(nil),  // 2: grabber.ListDivisionsRequest
	(*ListDivisionsResponse)(nil), // 3: grabber.ListDivisionsResponse
}
var file_pb_division_proto_depIdxs = []int32{
	1, // 0: grabber.ListDivisionsResponse.data:type_name -> grabber.Division
	0, // 1: grabber.DivisionService.GetDivision:input_type -> grabber.GetDivisionRequest
	2, // 2: grabber.DivisionService.ListDivisions:input_type -> grabber.ListDivisionsRequest
	1, // 3: grabber.DivisionService.GetDivision:output_type -> grabber.Division
	3, // 4: grabber.DivisionService.ListDivisions:output_type -> grabber.ListDivisionsResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_pb_division_proto_init() }
func file_pb_division_proto_init() {
	if File_pb_division_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_division_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDivisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_division_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Division); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_division_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDivisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_division_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDivisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_division_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_division_proto_goTypes,
		DependencyIndexes: file_pb_division_proto_depIdxs,
		MessageInfos:      file_pb_division_proto_msgTypes,
	}.Build()
	File_pb_division_proto = out.File
	file_pb_division_proto_rawDesc = nil
	file_pb_division_proto_goTypes = nil
	file_pb_division_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DivisionServiceClient is the client API for DivisionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DivisionServiceClient interface {
	GetDivision(ctx context.Context, in *GetDivisionRequest, opts ...grpc.CallOption) (*Division, error)
	ListDivisions(ctx context.Context, in *ListDivisionsRequest, opts ...grpc.CallOption) (*ListDivisionsResponse, error)
}

type divisionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDivisionServiceClient(cc grpc.ClientConnInterface) DivisionServiceClient {
	return &divisionServiceClient{cc}
}

func (c *divisionServiceClient) GetDivision(ctx context.Context, in *GetDivisionRequest, opts ...grpc.CallOption) (*Division, error) {
	out := new(Division)
	err := c.cc.Invoke(ctx, "/grabber.DivisionService/GetDivision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *divisionServiceClient) ListDivisions(ctx context.Context, in *ListDivisionsRequest, opts ...grpc.CallOption) (*ListDivisionsResponse, error) {
	out := new(ListDivisionsResponse)
	err := c.cc.Invoke(ctx, "/grabber.DivisionService/ListDivisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DivisionServiceServer is the server API for DivisionService service.
type DivisionServiceServer interface {
	GetDivision(context.Context, *GetDivisionRequest) (*Division, error)
	ListDivisions(context.Context, *ListDivisionsRequest) (*ListDivisionsResponse, error)
}

// UnimplementedDivisionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDivisionServiceServer struct {
}

func (*UnimplementedDivisionServiceServer) GetDivision(context.Context, *GetDivisionRequest) (*Division, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDivision not implemented")
}
func (*UnimplementedDivisionServiceServer) ListDivisions(context.Context, *ListDivisionsRequest) (*ListDivisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDivisions not implemented")
}

func RegisterDivisionServiceServer(s *grpc.Server, srv DivisionServiceServer) {
	s.RegisterService(&_DivisionService_serviceDesc, srv)
}

func _DivisionService_GetDivision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDivisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivisionServiceServer).GetDivision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grabber.DivisionService/GetDivision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivisionServiceServer).GetDivision(ctx, req.(*GetDivisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DivisionService_ListDivisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDivisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DivisionServiceServer).ListDivisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grabber.DivisionService/ListDivisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DivisionServiceServer).ListDivisions(ctx, req.(*ListDivisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DivisionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grabber.DivisionService",
	HandlerType: (*DivisionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDivision",
			Handler:    _DivisionService_GetDivision_Handler,
		},
		{
			MethodName: "ListDivisions",
			Handler:    _DivisionService_ListDivisions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/division.proto",
}
